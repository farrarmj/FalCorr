#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 24, 2018 10:33:11 PM

import sys
import FCSoptionWindow #user-defined
import FPGAserial #user-defined
from threading import  Thread
import io
import os
import queue
import time
import numpy as np
import matplotlib
import fileFormatter
import myCorr #user defined
import FCS_Analysis as fcs #user-defined
#import LaserController
import pandas as pd

matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg#, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

try:
    from Tkinter import *
    from Tkinter.filedialog import asksaveasfilename
    from Tkinter.filedialog import askopenfilename
    from tkinter.filedialog import askopenfilenames
    
    

except ImportError:
    from tkinter import* 
    from tkinter.filedialog import asksaveasfilename
    from tkinter.filedialog import askopenfilename
    from tkinter.filedialog import askopenfilenames
    


try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    


import FCS_GUI_support
#from tkinter import*

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, expParams
    root = Tk()    
    FCS_GUI_support.set_Tk_var()
    top = New_Toplevel (root)
    FCS_GUI_support.init(root, top)
    root.mainloop()
    w = None
    


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    FCS_GUI_support.set_Tk_var()
    top = New_Toplevel (w)
    FCS_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Courier New} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("1300x650+25+25")
        top.title("FalCorr FCS")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        ##List of useful variables##
        self.dataType = np.uint16
        self.timeScale = 0.5e-6
        self.minTime = 1e-6
        self.maxTau = 1
        self.acqStatus = 0
        self.maxTrialNum = 1
        self.trialNum = 1
        self.acqTime = 300
        self.computeCFs = IntVar()
        self.computeCFs.set(1)
        self.displayResults = IntVar()
        self.displayResults.set(1)
        self.PCH1 = np.zeros(0)
        self.PCH2 = np.zeros(0)
        self.bins = np.zeros(0)
        self.CF = np.zeros(0)
        self.loadNPZfile = ''
        self.correlations = [1,1,1,1] #default to all possible cross-correlations and count rate
        try:
            self.fpga = FPGAserial.openFPGA(mode = 'FCS')
            acqState = 'normal'
        except:
            self.fpga = FPGAserial.openFPGA(mode= 'None')
            acqState = 'disabled'
            print('No FPGA Connected.\nRunning in analysis only mode.')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.01, rely=0.07, height=31, width=50)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Trial #''')

        self.fig = Figure(figsize=(12,5), dpi=100,facecolor="#d9d9d9")
        self.myPlot = self.fig.add_subplot(122)
        self.myPlotPCH = self.fig.add_subplot(121)
        self.plotAxes = FigureCanvasTkAgg(self.fig,root)        
        self.plotAxes.get_tk_widget().pack(anchor='se',fill = "none",in_ = top)


        self.currentTrialStr = StringVar()
        self.currentTrial = Entry(top)
        self.currentTrial.place(relx=0.01, rely=0.13,height=41, relwidth=0.11)
        self.currentTrial.configure(background="white")
        self.currentTrial.configure(disabledforeground="#a3a3a3")
        self.currentTrial.configure(font=font10, justify =CENTER)
        self.currentTrial.configure(foreground="#000000")
        self.currentTrial.configure(highlightbackground="#d9d9d9")
        self.currentTrial.configure(highlightcolor="black")
        self.currentTrial.configure(insertbackground="black")
        self.currentTrial.configure(selectbackground="#c4c4c4")
        self.currentTrial.configure(selectforeground="black")
        self.currentTrial.configure(textvariable=self.currentTrialStr)
        self.currentTrial.configure(state="readonly")
        self.currentTrialStr.set(str(self.trialNum))

        self.runningIndVar = IntVar()
        self.runningInd = Checkbutton(top,command=self.setRunInd)
        self.runningInd.place(relx=0.3, rely=0.85, relheight=0.06
                , relwidth=0.12)
        self.runningInd.configure(activebackground="#d9d9d9")
        self.runningInd.configure(activeforeground="#000000")
        self.runningInd.configure(background="#d9d9d9")
        self.runningInd.configure(disabledforeground="#a3a3a3")
        self.runningInd.configure(font=font10)
        self.runningInd.configure(foreground="#000000")
        self.runningInd.configure(highlightbackground="#d9d9d9")
        self.runningInd.configure(highlightcolor="black")
        self.runningInd.configure(justify=LEFT)
        self.runningInd.configure(state=ACTIVE)
        self.runningInd.configure(text='''Running''')
        self.runningInd.configure(variable=self.runningIndVar)
        self.runningInd.invoke()

        self.PCH1_IndVar = IntVar()
        self.PCH1_IndVar.set(1)
        self.PCH1_Ind = Checkbutton(top,command=self.graphPCH)
        self.PCH1_Ind.place(relx=0.25, rely=0.8, relheight=0.06
                , relwidth=0.12)
        self.PCH1_Ind.configure(activebackground="#d9d9d9")
        self.PCH1_Ind.configure(activeforeground="#000000")
        self.PCH1_Ind.configure(background="#d9d9d9")
        self.PCH1_Ind.configure(disabledforeground="#a3a3a3")
        self.PCH1_Ind.configure(font=font10)
        self.PCH1_Ind.configure(foreground="#000000")
        self.PCH1_Ind.configure(highlightbackground="#d9d9d9")
        self.PCH1_Ind.configure(highlightcolor="black")
        self.PCH1_Ind.configure(justify=LEFT)
        self.PCH1_Ind.configure(state=ACTIVE)
        self.PCH1_Ind.configure(text='''Ch1 PCH''')
        self.PCH1_Ind.configure(variable=self.PCH1_IndVar)
        
        self.PCH2_IndVar = IntVar()
        self.PCH2_IndVar.set(1)
        self.PCH2_Ind = Checkbutton(top,command=self.graphPCH)
        self.PCH2_Ind.place(relx=0.35, rely=0.8, relheight=0.06
                , relwidth=0.12)
        self.PCH2_Ind.configure(activebackground="#d9d9d9")
        self.PCH2_Ind.configure(activeforeground="#000000")
        self.PCH2_Ind.configure(background="#d9d9d9")
        self.PCH2_Ind.configure(disabledforeground="#a3a3a3")
        self.PCH2_Ind.configure(font=font10)
        self.PCH2_Ind.configure(foreground="#000000")
        self.PCH2_Ind.configure(highlightbackground="#d9d9d9")
        self.PCH2_Ind.configure(highlightcolor="black")
        self.PCH2_Ind.configure(justify=LEFT)
        self.PCH2_Ind.configure(state=ACTIVE)
        self.PCH2_Ind.configure(text='''Ch2 PCH''')
        self.PCH2_Ind.configure(variable=self.PCH2_IndVar)
        
        self.LabelDh1 = Label(top)
        self.LabelDh1.place(relx=0.04, rely=0.72, height=41, width=70)
        self.LabelDh1.configure(activebackground="#f9f9f9")
        self.LabelDh1.configure(activeforeground="black")
        self.LabelDh1.configure(background="#d9d9d9")
        self.LabelDh1.configure(disabledforeground="#a3a3a3")
        self.LabelDh1.configure(font=font10)
        self.LabelDh1.configure(foreground="#000000")
        self.LabelDh1.configure(highlightbackground="#d9d9d9")
        self.LabelDh1.configure(highlightcolor="black")
        self.LabelDh1.configure(text='''D \u2095 1(nm)''')

        self.LabelDh2 = Label(top)
        self.LabelDh2.place(relx=0.04, rely=0.85, height=41, width=70)
        self.LabelDh2.configure(activebackground="#f9f9f9")
        self.LabelDh2.configure(activeforeground="black")
        self.LabelDh2.configure(background="#d9d9d9")
        self.LabelDh2.configure(disabledforeground="#a3a3a3")
        self.LabelDh2.configure(font=font10)
        self.LabelDh2.configure(foreground="#000000")
        self.LabelDh2.configure(highlightbackground="#d9d9d9")
        self.LabelDh2.configure(highlightcolor="black")
        self.LabelDh2.configure(text='''D \u2095 2(nm)''')
        

        self.hydroDiamStr1 = StringVar()
        self.hydroDiam1 = Entry(top)
        self.hydroDiam1.place(relx=0.01, rely=0.77,height=41, relwidth=0.11)
        self.hydroDiam1.configure(background="white")
        self.hydroDiam1.configure(disabledforeground="#a3a3a3")
        self.hydroDiam1.configure(font=font10, justify =CENTER)
        self.hydroDiam1.configure(foreground="#000000")
        self.hydroDiam1.configure(highlightbackground="#d9d9d9")
        self.hydroDiam1.configure(highlightcolor="black")
        self.hydroDiam1.configure(insertbackground="black")
        self.hydroDiam1.configure(selectbackground="#c4c4c4")
        self.hydroDiam1.configure(selectforeground="black")
        self.hydroDiam1.configure(textvariable=self.hydroDiamStr1)
        self.hydroDiam1.configure(state="readonly")
        self.hydroDiamStr1.set('-')

        self.hydroDiamStr2 = StringVar()
        self.hydroDiam2 = Entry(top)
        self.hydroDiam2.place(relx=0.01, rely=0.90,height=41, relwidth=0.11)
        self.hydroDiam2.configure(background="white")
        self.hydroDiam2.configure(disabledforeground="#a3a3a3")
        self.hydroDiam2.configure(font=font10, justify =CENTER)
        self.hydroDiam2.configure(foreground="#000000")
        self.hydroDiam2.configure(highlightbackground="#d9d9d9")
        self.hydroDiam2.configure(highlightcolor="black")
        self.hydroDiam2.configure(insertbackground="black")
        self.hydroDiam2.configure(selectbackground="#c4c4c4")
        self.hydroDiam2.configure(selectforeground="black")
        self.hydroDiam2.configure(textvariable=self.hydroDiamStr2)
        self.hydroDiam2.configure(state="readonly")
        self.hydroDiamStr2.set('-')

        self.LabelAlpha = Label(top)
        self.LabelAlpha.place(relx=0.175, rely=0.85, height=41, width=60)
        self.LabelAlpha.configure(activebackground="#f9f9f9")
        self.LabelAlpha.configure(activeforeground="black")
        self.LabelAlpha.configure(background="#d9d9d9")
        self.LabelAlpha.configure(disabledforeground="#a3a3a3")
        self.LabelAlpha.configure(font=font10)
        self.LabelAlpha.configure(foreground="#000000")
        self.LabelAlpha.configure(highlightbackground="#d9d9d9")
        self.LabelAlpha.configure(highlightcolor="black")
        self.LabelAlpha.configure(text='''\u03B1''')

        self.alphaStr = StringVar()
        self.alpha = Entry(top)
        self.alpha.place(relx=0.15, rely=0.90,height=41, relwidth=0.10)
        self.alpha.configure(background="white")
        self.alpha.configure(disabledforeground="#a3a3a3")
        self.alpha.configure(font=font10, justify =CENTER)
        self.alpha.configure(foreground="#000000")
        self.alpha.configure(highlightbackground="#d9d9d9")
        self.alpha.configure(highlightcolor="black")
        self.alpha.configure(insertbackground="black")
        self.alpha.configure(selectbackground="#c4c4c4")
        self.alpha.configure(selectforeground="black")
        self.alpha.configure(textvariable=self.alphaStr)
        self.alpha.configure(state="readonly")
        self.alphaStr.set('-')

        self.LabelN = Label(top)
        self.LabelN.place(relx=0.175, rely=0.72, height=41, width=85)
        self.LabelN.configure(activebackground="#f9f9f9")
        self.LabelN.configure(activeforeground="black")
        self.LabelN.configure(background="#d9d9d9")
        self.LabelN.configure(disabledforeground="#a3a3a3")
        self.LabelN.configure(font=font10)
        self.LabelN.configure(foreground="#000000")
        self.LabelN.configure(highlightbackground="#d9d9d9")
        self.LabelN.configure(highlightcolor="black")
        self.LabelN.configure(text='''<N>/C (nM)''')

        self.NStr = StringVar()
        self.N = Entry(top)
        self.N.place(relx=0.15, rely=0.77,height=41, relwidth=0.11)
        self.N.configure(background="white")
        self.N.configure(disabledforeground="#a3a3a3")
        self.N.configure(font=font10, justify =CENTER)
        self.N.configure(foreground="#000000")
        self.N.configure(highlightbackground="#d9d9d9")
        self.N.configure(highlightcolor="black")
        self.N.configure(insertbackground="black")
        self.N.configure(selectbackground="#c4c4c4")
        self.N.configure(selectforeground="black")
        self.N.configure(textvariable=self.NStr)
        self.N.configure(state="readonly")
        self.NStr.set('-')
        
        self.Label2 = Label(top)
        self.Label2.place(relx=0.01, rely=0.22, height=27, width=20)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font10)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''of''')

        self.maxTrialStr = StringVar()
        self.maxTrials = Entry(top)
        self.maxTrials.place(relx=0.01, rely=0.29,height=40, relwidth=0.11)
        self.maxTrials.configure(background="white")
        self.maxTrials.configure(disabledforeground="#a3a3a3")
        self.maxTrials.configure(font=font10, justify = CENTER)
        self.maxTrials.configure(foreground="#000000")
        self.maxTrials.configure(highlightbackground="#d9d9d9")
        self.maxTrials.configure(highlightcolor="black")
        self.maxTrials.configure(insertbackground="black")
        self.maxTrials.configure(selectbackground="#c4c4c4")
        self.maxTrials.configure(selectforeground="black")
        self.maxTrials.configure(textvariable=self.maxTrialStr)
        self.maxTrials.configure(state="readonly")
        self.maxTrialStr.set(str(self.maxTrialNum))

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.file = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Set Save Path",
                accelerator = 'ctrl+s',
                state = acqState,
                command = self.setSavePath)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Start Acq.",
                accelerator = 'ctrl+b',
                state = acqState,
                command=self.acquireData)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+e',
                label="StopAcq",
                state = acqState,
                command = self.stopAcq)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+o',
                label="Load CF for Analysis",
                command = self.loadNPZ)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+l',
                label="Load bin file(s)",
                command = self.loadBinFile)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+m',
                label="Overlay Multiple CFs",
                command = self.loadMultNPZ)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Overlay and Average CFs",
                command = self.overlayAndAverage)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Export NPZ to CSV",
                command = self.exportToCSV)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+s',
                label="Save Figure",
                command = self.saveAxes)
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Quit",
                accelerator = 'ctrl+q',
                command=self.quitProg,
                )

        ##establish hot keys##
        root.bind_all('<Control-Key-q>', self.quitProg)
        root.bind_all('<Control-Key-b>', self.acquireData)
        root.bind_all('<Control-Key-e>', self.stopAcq)
        root.bind_all('<Control-Key-s>', self.setSavePath)

        #Mode control variables
        self.modeVarDL = IntVar()
        self.modeVarCR = IntVar()
        self.modeVarCR.set(1)

        self.mode = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.mode,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                state = acqState,
                label="Mode")
        self.mode.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Data Logging",
                variable = self.modeVarDL,
                command  = self.setModeDL)
        self.mode.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Count Rate",
                variable = self.modeVarCR,
                command = self.setModeCR)
        self.options = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.options,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                state = acqState,
                label="Options")
        self.options.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                variable = self.computeCFs,
                label="Save CFs")
        self.options.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                variable = self.displayResults,
                label="Display Results")
        self.options.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Set Parameters...",
                command = self.callOptionWindow)
        self.analysis = Menu(top,tearoff=0)

        self.noAnalysisVar = IntVar()
        self.noAnalysisVar.set(1)
        self.simpleMonoAnalysisVar = IntVar()
        self.simpleMonoAnalysisVar.set(0)
        self.simpleBiAnalysisVar = IntVar()
        self.simpleBiAnalysisVar.set(0)
        self.tripletMonoAnalysisVar = IntVar()
        self.tripletMonoAnalysisVar.set(0)
        self.tripletBiAnalysisVar = IntVar()
        self.tripletBiAnalysisVar.set(0)
        self.simpleAnomalousAnalysisVar = IntVar()
        self.simpleAnomalousAnalysisVar.set(0)
        self.tripletAnomalousAnalysisVar = IntVar()
        self.tripletAnomalousAnalysisVar.set(0)
        self.maxEntropyAnalysisVar = IntVar()
        self.maxEntropyAnalysisVar.set(0)
        
        self.menubar.add_cascade(menu=self.analysis,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Analysis")
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="None",
                variable = self.noAnalysisVar,
                command = self.clearAnalysis)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Simple Monodisperse",
                command=self.clearNone,
                variable = self.simpleMonoAnalysisVar)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                command = self.clearNone,
                label="Simple Bimodal",
                variable = self.simpleBiAnalysisVar)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                command = self.clearNone,
                label="Triplet Monomodal",
                variable = self.tripletMonoAnalysisVar)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                command = self.clearNone,
                label="Triplet Bimodal",
                variable = self.tripletBiAnalysisVar)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                command = self.clearNone,
                label="Simple Anomalous",
                variable = self.simpleAnomalousAnalysisVar)
        self.analysis.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                command = self.clearNone,
                label="Triplet Anomalous",
                variable = self.tripletAnomalousAnalysisVar)
        self.analysis.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+c',
                label="Analzye Current Data Set(s)",
                command = self.analyzeData)

        #Laser Excitation Menu   
        self.excitation = Menu(top,tearoff=0)
        self.argon = IntVar()
        self.argon.set(1)
        self.hene = IntVar()
        self.hene.set(0)
        self.menubar.add_cascade(menu=self.excitation,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Excitation")
        self.excitation.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="488 nm",
                variable = self.argon)
        self.excitation.add_checkbutton(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="543 nm",
                variable = self.hene)

        #Help Menu
        self.helpMenu = Menu(top,tearoff = 0)
        self.menubar.add_cascade(menu=self.helpMenu,
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Help")
        self.helpMenu.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="About",
                command = self.aboutGUI)
        self.helpMenu.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                accelerator = 'ctrl+c',
                label="Calibrate...",
                command = self.calibrate)

 
#        self.excitation.add_command(
#                activebackground="#d8d8d8",
#                activeforeground="#000000",
#                background="#d9d9d9",
#                font="TkMenuFont",
#                foreground="#000000",
#                label="Adjust Argon Laser Power",
#                state = acqState,
#                command = self.laserPowerCntrl)
        self.Label4 = Label(top)
        self.Label4.place(relx=0.01, rely=0.39, height=41, width=135)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font=font10)
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Ch1 Count (kHz)''')

        self.Ch1countRateStr = StringVar()
        self.Ch1countRate = Entry(top)
        self.Ch1countRate.place(relx=0.01, rely=0.44,height=40, relwidth=0.11)
        self.Ch1countRate.configure(background="white")
        self.Ch1countRate.configure(disabledforeground="#a3a3a3")
        self.Ch1countRate.configure(font=font10,justify = CENTER)
        self.Ch1countRate.configure(foreground="#000000")
        self.Ch1countRate.configure(highlightbackground="#d9d9d9")
        self.Ch1countRate.configure(highlightcolor="black")
        self.Ch1countRate.configure(insertbackground="black")
        self.Ch1countRate.configure(selectbackground="#c4c4c4")
        self.Ch1countRate.configure(selectforeground="black")
        self.Ch1countRate.configure(textvariable=self.Ch1countRateStr)
        self.Ch1countRate.configure(state = "readonly")
        self.Ch1countRateStr.set("-")

        self.Label7 = Label(top)
        self.Label7.place(relx=0.01, rely=0.57, height=41, width=135)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(font=font10)
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Ch2 Count (kHz)''')

        self.Ch2countRateStr = StringVar()
        self.Ch2countRate = Entry(top)
        self.Ch2countRate.place(relx=0.01, rely=0.62,height=40, relwidth=0.11)
        self.Ch2countRate.configure(background="white")
        self.Ch2countRate.configure(disabledforeground="#a3a3a3")
        self.Ch2countRate.configure(font=font10,justify = CENTER)
        self.Ch2countRate.configure(foreground="#000000")
        self.Ch2countRate.configure(highlightbackground="#d9d9d9")
        self.Ch2countRate.configure(highlightcolor="black")
        self.Ch2countRate.configure(insertbackground="black")
        self.Ch2countRate.configure(selectbackground="#c4c4c4")
        self.Ch2countRate.configure(selectforeground="black")
        self.Ch2countRate.configure(textvariable=self.Ch2countRateStr)
        self.Ch2countRate.configure(state = "readonly")
        self.Ch2countRateStr.set("-")

        self.Label8 = Label(top)
        self.Label8.place(relx=0.7, rely=0.8, height=30, width=135)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(font=font10)
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='\u03c4 min')

        self.tauMinStr = StringVar()
        self.tauMin = Entry(top)
        self.tauMin.place(relx=0.8, rely=0.8,height=30, relwidth=0.11)
        self.tauMin.configure(background="white")
        self.tauMin.configure(disabledforeground="#a3a3a3")
        self.tauMin.configure(font=font10,justify = CENTER)
        self.tauMin.configure(foreground="#000000")
        self.tauMin.configure(highlightbackground="#d9d9d9")
        self.tauMin.configure(highlightcolor="black")
        self.tauMin.configure(insertbackground="black")
        self.tauMin.configure(selectbackground="#c4c4c4")
        self.tauMin.configure(selectforeground="black")
        self.tauMin.configure(textvariable=self.tauMinStr)
        self.tauMinStr.set("1e-6")

        self.Label9 = Label(top)
        self.Label9.place(relx=0.7, rely=0.9, height=30, width=135)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font=font10)
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='\u03c4 max')

        self.tauMaxStr = StringVar()
        self.tauMax = Entry(top)
        self.tauMax.place(relx=0.8, rely=0.9,height=30, relwidth=0.11)
        self.tauMax.configure(background="white")
        self.tauMax.configure(disabledforeground="#a3a3a3")
        self.tauMax.configure(font=font10,justify = CENTER)
        self.tauMax.configure(foreground="#000000")
        self.tauMax.configure(highlightbackground="#d9d9d9")
        self.tauMax.configure(highlightcolor="black")
        self.tauMax.configure(insertbackground="black")
        self.tauMax.configure(selectbackground="#c4c4c4")
        self.tauMax.configure(selectforeground="black")
        self.tauMax.configure(textvariable=self.tauMaxStr)
        self.tauMaxStr.set("1")
   
        self.refresh = Button(top)
        self.refresh.place(relx=0.65, rely=0.85,height=30, relwidth=0.05)
        self.refresh.configure(background="#f9f9f9")
        self.refresh.configure(disabledforeground="#a3a3a3")
        self.refresh.configure(font=font10,justify = CENTER)
        self.refresh.configure(foreground="#000000")
        self.refresh.configure(highlightbackground="#d9d9d9")
        self.refresh.configure(highlightcolor="black")
        self.refresh.configure(text = 'Refresh')
        self.refresh.configure(command = self.refreshAxes)

        
        self.maxTime = 1;
        self.minTime = 1e-6;
        self.analysisMode = "None"
        self.savePath = ""
        self.mode = "Count Rate"
        self.pathChanged = 0 #indicate if file save path updated or not
        self.dataQ = queue.Queue(0)

        
    def setRunInd(self):
        if self.acqStatus:
            self.runningIndVar.set(1)
        else:
            self.runningIndVar.set(0)
            
         
    def quitProg(self,*args): #exit program
        self.fpga.closeFPGA()
        root.destroy()
        sys.exit(1)

    def acquireData(self,*args):
        if self.acqStatus == 0: #don't allow repeats for button presses.
            if self.mode == "Count Rate":
                self.acqStatus = 1
                self.runningInd.invoke()
                root.update()
                t = Thread(target=self.streamCountRate)#, args=self)
                self.fpga.startAcq()
                t.start()
            elif self.mode == "Data Logging":
                self.fpga.setAcqTime(self.acqTime)
                bytesToRead = 4000 #Read length
                self.acqStatus = 1
                self.runningInd.invoke()

                #make sure you have a new file to save
                if not self.pathChanged:
                    self.setSavePath()

                #If valid path
                if self.pathChanged:
                    #start loop    
                    for j in range(0,self.maxTrialNum):
                        self.myPlot.cla() #clear axes
                        outfile = self.savePath + "_Trial_" + str(j+1) + ".bin" #file to save to
                        self.loadBinFile = outfile #update latest load file to current file

                        #Update GUI
                        self.trialNum = j+1
                        self.currentTrialStr.set(str(self.trialNum))
                        root.update()

                        #Log Data set                    
                        fid = io.open(outfile,mode='wb')
                        self.logData(bytesToRead)
                        self.queueToFile(fid)

                        #compute CFs
                        if self.computeCFs.get():
                            self.computeCorrFun(outfile) #compute desired correlations

                        
                        #display results
                        if self.displayResults.get():
                            maxTime = 1
                            mask = np.less_equal(self.bins,self.maxTime) & np.greater_equal(self.bins,self.minTime)
                            self.myPlot.semilogx(self.bins[mask],self.CF[mask],**{'linestyle':'none','marker':'o','label':'raw'})
                            self.myPlot.grid(b=True,which = 'minor',linewidth=0.5)
                            self.myPlot.set_xlabel("\u03C4 (s)")
                            self.myPlot.set_ylabel("G(\u03C4)")
                            self.myPlot.autoscale(enable =True,axis = 'y')
                            self.plotAxes.draw()

                        #Perform fit and analysis    
                        if not(self.noAnalysisVar.get()):
                            self.analyzeData()
                                            
                            
                    
                    #Exit for loop        
                    self.trialNum = 1 #reset trial number counter
                    self.runningInd.invoke() #update running indicator
                    self.pathChanged = 0 #protects against accidental overwrite
                    

            else:
                print("No such mode")
                
    def streamCountRate(self):
        refreshRate = 0.25
        self.fpga.setAcqTime(5) #set to arbitrary  acquisition
        countRateCh1 = 0
        countRateCh2 = 0
        while self.acqStatus:
            countRates = self.fpga.getCountRateDualChannel(self.dataType,self.timeScale)
            countRateCh1 = countRates[0]
            countRateCh2 = countRates[1]
            self.Ch1countRateStr.set('%.3f' % countRateCh1)
            self.Ch2countRateStr.set('%.3f' % countRateCh2)
            time.sleep(refreshRate)
            self.fpga.ser.reset_input_buffer() #Clear extraneous
        self.fpga.setAcqTime(self.acqTime)#set back to original
        self.fpga.stopAcq()
        
    def logData(self,bytesToRead):
            self.acqStatus =1
            #initialize start time
            startTime = time.time()
            self.fpga.startAcq() #write start to board
            while self.acqStatus:
                if (time.time()-startTime < self.acqTime+1 or self.fpga.dataWaiting()>0):
                    b = self.fpga.read(bytesToRead) #read from port
                    self.dataQ.put(b) #Write to queue
                else:
                    break
            self.fpga.stopAcq()
            self.acqStatus = 0

    def stopAcq(self,*args):
        self.acqStatus = 0
        self.fpga.stopAcq()
        self.runningInd.invoke()

    def callOptionWindow(self,mode= 'normal'):
        params = FCSoptionWindow.create_New_OptionWindow(root,mode)
        if params[1].newData == "Yes":
            self.acqTime = params[1].acqDur
            self.maxTrialNum = params[1].maxNumTrials
            self.maxTrialStr.set(str(self.maxTrialNum))
            self.correlations = params[1].correlations
                
    def setSavePath(self,*args):
        self.savePath = asksaveasfilename()
        if len(self.savePath):
            self.pathChanged = 1
            
    def queueToFile(self,fid): #writes data in queu to binary file
        while (self.acqStatus or (not self.dataQ.empty())):
            if not self.dataQ.empty():
                b = self.dataQ.get()
                fid.write(b)
                self.dataQ.task_done()
        fid.close()    
            
    #updates mode menu items to be self-consistent
    def setModeDL(self):
        self.stopAcq()
        self.acqStatus = 0
        self.modeVarDL.set(1)
        self.modeVarCR.set(0)
        self.mode = "Data Logging"

    #updates mode menu items to be self-consistent
    def setModeCR(self):
        self.stopAcq()
        self.modeVarDL.set(0)
        self.modeVarCR.set(1)
        self.mode = "Count Rate"

    #updates analysis menu items to be self-consistent
    def clearAnalysis(self):
        self.noAnalysisVar.set(1)
        self.simpleMonoAnalysisVar.set(0)
        self.simpleBiAnalysisVar.set(0)
        self.tripletMonoAnalysisVar.set(0)
        self.tripletBiAnalysisVar.set(0)
        self.simpleAnomalousAnalysisVar.set(0)
        self.tripletAnomalousAnalysisVar.set(0)
        self.maxEntropyAnalysisVar.set(0)
        
    #updates analysis menu items to be self-consistent
    def clearNone(self):
        self.noAnalysisVar.set(0)

    #Load and display previous calculation results
    def loadNPZ(self,fileName = ''):
        #Prompt for file name if none provided
        if not fileName:
            self.loadNPZfile = askopenfilename(title = "Select NPZ File",filetypes = (("NPZ Files","*.npz"),("all files","*.*")))
        else:
            self.loadNPZfile = fileName
        if self.loadNPZfile:
            self.myPlot.cla() #clear axes
            self.myPlotPCH.cla() #clear axes
            
            #Load and Display Correlation Function
            data = np.load(self.loadNPZfile)
            self.bins = data['bins']
            self.CF = data['CF']
            self.graphCF(lastPlot = True)

            #Load and display count rates
            CR = data['countRates']
            countRateCh1 = CR[0]
            countRateCh2 = CR[1]
            self.Ch1countRateStr.set('%.3f' % countRateCh1)
            self.Ch2countRateStr.set('%.3f' % countRateCh2)

            #Load and Display PCHs
            PCH = data['PCH']
            self.PCH1 = PCH[0]
            self.PCH2 = PCH[1]
            self.graphPCH(lastPlot = True)

    def graphCF(self,lastPlot = False, color = None):
        #Load and Display Correlation Function
        mask = np.less_equal(self.bins,self.maxTime) & np.greater_equal(self.bins,self.minTime)#only show results in specified window
        if color == None:
            self.myPlot.semilogx(self.bins[mask],self.CF[mask],**{'linestyle':'none','marker':'o'})
        else:
            self.myPlot.semilogx(self.bins[mask],self.CF[mask],**{'linestyle':'-','linewidth':2,'color':color})
        self.myPlot.grid(b=True,which = 'minor',linewidth=0.5)
        self.myPlot.set_xlabel("\u03C4 (s)")
        self.myPlot.set_ylabel("G(\u03C4)")
        self.myPlot.autoscale(enable =True,axis = 'y')
        if lastPlot:
            self.plotAxes.draw()

    #Graph PCH
    def graphPCH(self,lastPlot = False, color = [None,None]):
        if len(self.PCH1) or len(self.PCH2): #If initialized
            if self.PCH1_IndVar.get() and (not np.isnan(self.PCH1[0][0])):
                histLen = max(len(self.PCH1[0]),len(self.PCH1[1]))
                if color[0] ==None:
                    self.myPlotPCH.semilogy(self.PCH1[1][0:histLen-1],self.PCH1[0][0:histLen-1],**{'marker':'o'})
                else:
                    self.myPlotPCH.semilogy(self.PCH1[1][0:histLen-1],self.PCH1[0][0:histLen-1],**{'marker':'o','color':color[0],'linestyle':'--'})
            if self.PCH2_IndVar.get() and (not np.isnan(self.PCH2[0][0])):
                histLen = max(len(self.PCH2[0]),len(self.PCH2[1]))
                if color[1] ==None:
                    self.myPlotPCH.semilogy(self.PCH2[1][0:histLen-1],self.PCH2[0][0:histLen-1],**{'marker':'o'})
                else:
                    self.myPlotPCH.semilogy(self.PCH2[1][0:histLen-1],self.PCH2[0][0:histLen-1],**{'marker':'o','color':color[1],'linestyle':'--'})
            self.myPlotPCH.set_xlabel("Counts Per Interval")
            self.myPlotPCH.set_ylabel("Probability")
            self.myPlotPCH.autoscale(enable =True,axis = 'y')
            if lastPlot:
                self.plotAxes.draw()
            
    def loadBinFile(self): #Load bin files and compute selected CFs. Results saved to final
        binFileList = askopenfilenames(title = "Select .bin file(s)",filetypes = (("bin files","*.bin"),("all files","*.*")))
        params = self.callOptionWindow(mode = 'disabled') #Select CFs to compute

        #set to save and display
        temp1 = self.computeCFs.get()
        temp2 = self.displayResults.get()
        self.computeCFs.set(1)
        self.displayResults.set(1)
        
        #Indicate computations taking place
        self.acqStatus = 1
        self.runningInd.invoke()
        root.update()
        for j in range(0,len(binFileList)): #Load files and compute selected CFs
            self.computeCorrFun(binFileList[j])
        if len(binFileList)==1:
            self.loadNPZ(self.loadNPZfile)

        #Indicate computations completed
        self.acqStatus = 0
        self.runningInd.invoke()

        #set save and display preferences back to normal
        temp1 = self.computeCFs.set(temp1)
        temp2 = self.displayResults.set(temp2)

    def loadMultNPZ(self,NPZFileList=''):
        #Prompt for file names if none provided
        if not NPZFileList:
            self.loadNPZfile = askopenfilenames(title = "Select NPZ Files",filetypes = (("NPZ Files","*.npz"),("all files","*.*")))
        else:
            self.loadNPZfile = NPZFileList
        if self.loadNPZfile:
            self.myPlot.cla() #clear axes
            self.myPlotPCH.cla()
        #Load Data
        for j in range(0,len(self.loadNPZfile)):
            data = np.load(self.loadNPZfile[j])
            self.bins = data['bins']
            self.CF = data['CF']
            self.PCH1,self.PCH2 = data['PCH']
            self.graphCF(lastPlot = (j==len(self.loadNPZfile)-1))
            self.graphPCH(lastPlot = (j==len(self.loadNPZfile)-1))

    def computeCorrFun(self,file):
        CF_label = {
            0: 'Ch1ACF.npz',
            1: 'Ch1xCh2.npz',
            2: 'Ch2,Ch1.npz',
            3: 'Ch2ACF.npz'
            }
        for j in range(4):
            #Update Count Rates
            countRateCh1,countRateCh2 = myCorr.getCountRate(file,self.dataType)
            countRateCh1 = countRateCh1/self.timeScale/1000
            countRateCh2 = countRateCh2/self.timeScale/1000
            self.Ch1countRateStr.set('%.3f' % countRateCh1)
            self.Ch2countRateStr.set('%.3f' % countRateCh2)
            #Generate PCH
            self.PCH1,self.PCH2 = myCorr.getPCHs(file,self.dataType,intBins=200)

            if self.correlations[j]:
                results = myCorr.multiTauCFfromDeltas(file,self.dataType,j)
                self.bins = results[1]*self.timeScale
                self.CF = results[0]
                #save CF to file
                if self.computeCFs.get():
                    outfile = file[0:len(file)-4]+CF_label.get(j)
                    self.loadNPZfile = outfile #update latest load file to current file
                    np.savez(outfile,bins=self.bins,CF=self.CF,countRates = [countRateCh1,countRateCh2],PCH = [self.PCH1,self.PCH2]) #save to file



    def analyzeData(self):
        if self.loadNPZfile and not(self.noAnalysisVar.get()): #check file list present to begin with and that analysis is checked, if not, do nothing
            #Identify wavelength
            if self.argon.get() and not self.hene.get(): #488-nm excitation
                wavelength = 488
            elif self.hene.get() and not self.argon.get(): #543-nm excitation
                wavelength = 543
            else:
                wavelength = np.NAN

            myFitter = fcs.scopeFit(wavelength) #fitting object
            
            if isinstance(self.loadNPZfile,str):
                self.loadNPZfile = [self.loadNPZfile] #Insure file list is part of a list, not a single string
            for j in range(0,len(self.loadNPZfile)):
                data = np.load(self.loadNPZfile[j])

                #Load CF data
                self.bins = data['bins']
                self.CF = data['CF']
                
                #Load and display count rates
                CR = data['countRates']
                countRateCh1 = CR[0]
                countRateCh2 = CR[1]
                self.Ch1countRateStr.set('%.3f' % countRateCh1)
                self.Ch2countRateStr.set('%.3f' % countRateCh2)

                #Load PCHs (for consistency)
                PCH = data['PCH']
                self.PCH1 = PCH[0]
                self.PCH2 = PCH[1]

                mask = np.less_equal(self.bins,self.maxTime) & np.greater_equal(self.bins,self.minTime)
                #Perform simple monomodal fit
                if self.simpleMonoAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("simpleMonodisperse",x=self.bins[mask],y=self.CF[mask])
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_simpleMonomodal.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius (m): " + str(Dh1) + "\n")
                    fid.write("G0: " + str(params[0]) +"\n")
                    fid.write("GInf:" + str(params[1]) + "\n")
                    fid.write("tauD: " + str(params[2])+ '\n')
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um):" + str(wxy) + "\n")
                    fid.write("axial ratio, a:" + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Show average number of molecules
                    conc = fcs.measureConc(params[0],wavelength)
                    self.NStr.set('%.2f' % float(1/params[0]) + ' \ %.2f' % conc)
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.simpleMonodisperse(self.bins[mask],params[0],params[1],params[2]),**{'linewidth':1,'label':'Simple Mono.'})

                #Perform triplet-corrected monomodal fit
                if self.tripletMonoAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("tripletMonodisperse",self.bins[mask],self.CF[mask])
                    #write fit results to file
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_tripletMonomodal.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius: " + str(Dh1) + "\n")
                    fid.write("G0: " + str(params[0]) +"\n")
                    fid.write("GInf: " + str(params[1]) + "\n")
                    fid.write("F: " + str(params[2]) + "\n")
                    fid.write("tauD: " + str(params[3])+ "\n")
                    fid.write("tauF: " + str(params[4])+ "\n")
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um):" + str(wxy) + "\n")
                    fid.write("axial ratio, a:" + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Show average number of molecules
                    conc = fcs.measureConc(params[0],wavelength)
                    self.NStr.set('%.1f' % float(1/params[0])+ ' \ %.2f' % conc)
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.tripletMonodisperse(self.bins[mask],params[0],params[1],params[2],params[3],params[4]),**{'linewidth':1,'label':'Triplet Mono'})
                
                #Perform simple bimodal fit
                if  self.simpleBiAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("simpleBimodal",self.bins[mask],self.CF[mask])
                    #write fit results to file
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_simpleBimodal.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius 1: " + str(Dh1) + "\n")
                    fid.write("Hydrodynamic Radius 2: " + str(Dh2) + "\n")
                    fid.write("G1: " + str(params[0]) +"\n")
                    fid.write("G2: " + str(params[1]) +"\n")
                    fid.write("GInf: " + str(params[2]) + "\n")
                    fid.write("tauD1: " + str(params[3])+ "\n")
                    fid.write("tauD2: " + str(params[4])+ "\n")
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um):" + str(wxy) + "\n")
                    fid.write("axial ratio, a:" + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Hide average number of molecules
                    self.NStr.set('-')
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.simpleBimodal(self.bins[mask],params[0],params[1],params[2],params[3],params[4]),**{'linewidth':1,'label':'Simple Bi'})

                #Perform triplet-corrected bimodal fit
                if  self.tripletBiAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("tripletBimodal",self.bins[mask],self.CF[mask])
                    #write fit results to file
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_tripletBimodal.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius 1: " + str(Dh1) + "\n")
                    fid.write("Hydrodynamic Radius 2: " + str(Dh2) + "\n")
                    fid.write("G1: " + str(params[0]) +"\n")
                    fid.write("G2: " + str(params[1]) +"\n")
                    fid.write("GInf: " + str(params[2]) + "\n")
                    fid.write("F: " + str(params[3])+ "\n")
                    fid.write("tauD1: " + str(params[4])+ "\n")
                    fid.write("tauD2: " + str(params[5])+ "\n")
                    fid.write("tauDF: " + str(params[6])+ "\n")
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um):" + str(wxy) + "\n")
                    fid.write("axial ratio, a:" + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Hide average number of molecules
                    self.NStr.set('-')
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.tripletBimodal(self.bins[mask],params[0],params[1],params[2],params[3],params[4],params[5],params[6]),**{'linewidth':1,'label':'Triplet Bi'})
            
                #Simple anomalous diffusion option    
                if self.simpleAnomalousAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("simpleAnomalous",x=self.bins[mask],y=self.CF[mask])
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_simpleAnomalous.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius: " + str(Dh1) + "\n")
                    fid.write("G0: " + str(params[0]) +"\n")
                    fid.write("GInf:" + str(params[1]) + "\n")
                    fid.write("tauD: " + str(params[2])+ '\n')
                    fid.write("alpha: " + str(params[3]) + '\n')
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um): " + str(wxy) + "\n")
                    fid.write("axial ratio, a: " + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Show average number of molecules
                    conc = fcs.measureConc(params[0],wavelength)
                    self.NStr.set('%.1f' % float(1/params[0])+ ' \ %.2f' % conc)
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.simpleAnomalous(self.bins[mask],params[0],params[1],params[2],params[3]),**{'linewidth':1,'label':'Simple Anom.'})

                #Triplet-corrected anomlaous diffusion option
                if self.tripletAnomalousAnalysisVar.get():
                    params,Dh1,Dh2,alpha,wxy,a = myFitter.getHydroDiam("tripletAnomalous",x=self.bins[mask],y=self.CF[mask])
                    outfile = self.loadNPZfile[j][0:len(self.loadNPZfile[j])-4]+ "_tripletAnomalous.txt"
                    fid = io.open(outfile,mode = 'w')
                    fid.write("Hydrodynamic Radius: " + str(Dh1) + "\n")
                    fid.write("G0: " + str(params[0]) +"\n")
                    fid.write("GInf:" + str(params[1]) + "\n")
                    fid.write("F: " + str(params[2]) + "\n")
                    fid.write("tauD: " + str(params[3])+ '\n')
                    fid.write("alpha: " + str(params[4])+ '\n')
                    fid.write("tauF: " + str(params[5])+ '\n')
                    fid.write("Min Time: " + str(self.minTime) +"\n")
                    fid.write("Max Time: " + str(self.maxTime) + "\n")
                    fid.write("wxy (um):" + str(wxy) + "\n")
                    fid.write("axial ratio, a:" + str(a) + "\n")
                    fid.write("Wavelength: " + str(wavelength) + "\n")
                    fid.close()
                    #Show average number of molecules
                    conc = fcs.measureConc(params[0],wavelength)
                    self.NStr.set('%.1f' % float(1/params[0])+ ' \ %.2f' % conc)
                    if self.displayResults.get(): #add to plot
                        self.myPlot.semilogx(self.bins[mask],myFitter.tripletAnomalous(self.bins[mask],params[0],params[1],params[2],params[3],params[4],params[5]),**{'linewidth':1,'label':'Triplet Anom.'})
       
                        
                #update gui strings
                self.hydroDiamStr1.set('%.2f' % float(Dh1/1e-9))
                self.hydroDiamStr2.set('%.2f' % float(Dh2/1e-9))
                self.alphaStr.set('%.2f' % float(alpha))

                #Draw graphs
                self.plotAxes.draw()

    def refreshAxes(self):
        #Validate min/max delay entries
        try:
            self.minTime = float(self.tauMinStr.get())
        except:
            self.tauMinStr.set(str(self.minTime))
        try:
            self.maxTime = float(self.tauMaxStr.get())
        except:
            self.tauMaxStr.set(str(self.maxTime))

        #Insure minTime is less than MaxTime    
        if self.maxTime<self.minTime:
            self.minTime = 1e-6;
            self.maxTime = 1.0;
            self.tauMaxStr.set(str(self.maxTime))
            self.tauMinStr.set(str(self.minTime))

        #Reload and redraw
        if isinstance(self.loadNPZfile,str):
            self.loadNPZ(fileName = self.loadNPZfile)
        else:
            self.loadMultNPZ(NPZFileList=self.loadNPZfile)

        #Update fits accordingly
        if not(self.noAnalysisVar.get()): 
            self.analyzeData() 

    def saveAxes(self):
        if isinstance(self.loadNPZfile,str):
            initialfile = os.path.split(self.loadNPZfile)
            initialfile = initialfile[len(initialfile)-1]
            initialfile = initialfile[0:len(initialfile)-4]
            outFile = asksaveasfilename(title = 'Save Figure As...',defaultextension = 'pdf',initialfile = initialfile)
        else:
            outFile = asksaveasfilename(title = 'Save Figure As...',defaultextension = 'pdf',initialfile = 'MultipleFileGraph')
        self.fig.savefig(outFile,bbox_inches = 'tight')

    def exportToCSV(self):
        if not(self.loadNPZfile):
            self.loadMultNPZ()
        if isinstance(self.loadNPZfile,str):
            fileFormatter.npzToFormat([self.loadNPZfile])
        else:
            fileFormatter.npzToFormat(self.loadNPZfile)
    

    def overlayAndAverage(self,NPZFileList=''):
        #Prompt for file names if none provided
        if not NPZFileList:
            self.loadNPZfile = askopenfilenames(title = "Select NPZ Files",filetypes = (("NPZ Files","*.npz"),("all files","*.*")))
        else:
            self.loadNPZfile = NPZFileList
        if self.loadNPZfile:
            self.myPlot.cla() #clear axes
        #Initialize arrays to first element
            data = np.load(self.loadNPZfile[0])
            CFData = data['CF']
            self.CF = data['CF']
            self.bins = data['bins']
            countRateData = data['countRates']
            self.PCH1,self.PCH2 = data['PCH']
            PCH1Data = self.PCH1[0]
            PCH2Data = self.PCH2[0]
            self.graphCF(lastPlot = False)
            self.graphPCH(lastPlot = False)
        #run through list
        for j in range(1,len(self.loadNPZfile)):
            data = np.load(self.loadNPZfile[j])
            self.bins = data['bins']
            self.CF = data['CF']
            countRate = data['countRates']
            self.PCH1,self.PCH2 = data['PCH']
            self.graphCF(lastPlot = False)
            self.graphPCH(lastPlot = False)
            CFData = np.vstack((CFData,np.array(self.CF)))
            countRateData = np.vstack((countRateData,np.array(countRate)))
            PCH1Data = np.vstack((PCH1Data,np.array(self.PCH1[0])))
            PCH2Data = np.vstack((PCH2Data,np.array(self.PCH2[0])))

        #Find Averaged Values
        dataAverage = np.mean(CFData,0)
        self.CF = dataAverage
        countAverage = np.mean(countRateData,0)
        self.Ch1countRateStr.set('%.3f' % countAverage[0])
        self.Ch2countRateStr.set('%.3f' % countAverage[1])
        PCH1Average = np.mean(PCH1Data,0)
        PCH2Average = np.mean(PCH2Data,0)
        self.PCH1[0] = PCH1Average
        self.PCH2[0] = PCH2Average
        self.graphCF(lastPlot = True,color ='black')
        self.graphPCH(lastPlot = True,color = ['green','red'])
        #Opt to save averaged data
        outFile = asksaveasfilename(title = 'Save Figure As...',defaultextension = 'npz',initialfile = self.loadNPZfile[j])
        if len(outFile):
            np.savez(outFile,bins=self.bins,CF=dataAverage,countRates = countAverage,PCH = [self.PCH1,self.PCH2]) #save to file


    def calibrate(self):
        answer = messagebox.askyesno("Recalibration Request","Are you sure you want to recalibrate? All previous data will be overwritten")
        if answer:
            answer = simpledialog.askstring("Authorization Required", "Enter Your Password")
            pwd = 'Falcon2020'
            if answer == pwd:
                #Physical Constants
                kb = 1.38064852e-23 #Boltzmann constant
                Temp = 295 #Temperature
                eta=8.90e-4 #viscosity

                #Open config file
                #path = os.getenv('ProgramFiles(x86)')
                path = os.path.dirname(os.path.abspath(__file__))
                if not os.path.isdir(os.path.join(path,'FalCorr')):
                    os.mkdir(os.path.join(path,'FalCorr'))
                path = os.path.join(path,'FalCorr')
                configFile = os.path.join(path,'config.txt')
                fid = io.open(configFile,'w')
                
                #Calibrate each wavelength
                wavelength = [488,543]
                myFit = fcs.scopeFit(0) #Fitter class
                for j in range(0,2):
                    titleString = "Select Files For " + str(wavelength[j]) + "-nm Fitting Focal Parameters"
                    self.loadNPZfile = askopenfilenames(title = titleString,filetypes = (("NPZ Files","*.npz"),("all files","*.*")))
                    self.loadMultNPZ(NPZFileList=self.loadNPZfile) #load and display items
                
                    #insure in list format
                    if isinstance(self.loadNPZfile,str):
                        self.loadNPZfile = [self.loadNPZfile]
                    #Fit calibration curves
                    a = np.zeros([len(self.loadNPZfile),1]) #initialize fit array
                    tauD = np.zeros([len(self.loadNPZfile),1]) #initilaize fit array
                    fileName = 'Calib'+str(wavelength[j]) + 'List.txt'
                    calibFile = os.path.join(path,fileName)
                    calib = io.open(calibFile,'w')

                    for k in range(0,len(self.loadNPZfile)):
                        data = np.load(self.loadNPZfile[k])
                        self.bins = data['bins']
                        self.CF = data['CF']
                        mask = np.less_equal(self.bins,self.maxTime) & np.greater_equal(self.bins,self.minTime)
                        params = myFit.calFit(self.bins[mask],self.CF[mask])
                        a[k] = params[3]
                        tauD[k] = params[2]
                        writeStr = self.loadNPZfile[k] + '\ta: ' + str(a[k]) + '\ttauD: ' + str(tauD[k]) + '\n' 
                        calib.write(writeStr)
                    calib.close()

                    #Average Data Sets
                    A = np.mean(a)
                    TauD = np.mean(tauD)

                    #Back-calculate beam parameters
                    Dh = simpledialog.askfloat('Calibration','Enter known hydrodynamic diameter in nm')
                    Dh = Dh*1e-9 #convert to meters
                    Dt = kb*Temp/(3*np.pi*eta*Dh) #Calculate diffusion constant
                    wxy = np.sqrt(4*Dt*TauD) #beam waist in meters
                    wxy = wxy/1e-6 #convert to microns

                    #Print to file
                    fid.write('wxy' + str(wavelength[j]) + '\t%.2f' % wxy + '\n')
                    fid.write('a' + str(wavelength[j]) + '\t%.2f' % A + '\n')

                #Determine focal volume
                fid.close()    
                
            else:
                messagebox.showerror("Authorization Denied", "Incorrect Password")

    def aboutGUI(self):
        #eg.msgbox(msg = "muCorr FCS Software\nCreated by Matthew J. Farrar\nEmail: mfarrar@messiah.edu\nCopyright 2019\nAll Rights Reserved",title = 'About muCorr')
        messagebox.showinfo("About FalCorr", "FalCorr FCS Software\nCreated by Matthew J. Farrar\nEmail: mfarrar@messiah.edu\nCopyright 2019\nAll Rights Reserved")
        
if __name__ == '__main__':
    vp_start_gui()



